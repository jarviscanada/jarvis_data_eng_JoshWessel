package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.Quote;
import ca.jrvs.apps.trading.model.domain.SecurityOrder;
import ca.jrvs.apps.trading.model.domain.Trader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataRetrievalFailureException;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

  private TraderDao traderDao;
  private AccountDao accountDao;
  private PositionDao positionDao;
  private SecurityOrderDao securityOrderDao;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao, PositionDao positionDao, SecurityOrderDao securityOrderDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.positionDao = positionDao;
    this.securityOrderDao = securityOrderDao;
  }

  /**
   * Create a new trader and initialize a new account with 0 amount.
   * - Validate user input (all fields must be non-empty
   * - Create a trader
   * - Create an account
   * - Create, setup, and return a new traderAccountView
   *
   * Assumption: to simplify the logic, each trader has only one account where traderId == accountId
   *
   * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
   * @return traderAccountView
   * @throws IllegalArgumentException if a trader has null fields or id is not null.
   */
  public void createTraderAndAccount(Trader trader) {
    if (!validateTrader(trader)) {
      throw new IllegalArgumentException("Trader is invalid");
    }
    traderDao.save(trader);

    Account account = new Account();
    account.setId(trader.getId());
    account.setTraderId(trader.getId());
    account.setAmount(0.0D);
    accountDao.save(account);

//    SecurityOrder securityOrder = new SecurityOrder();
//    securityOrder.setId(trader.getId());
//    securityOrder.setAccountId(trader.getId());
//    securityOrder.setStatus("FILLED");
//    securityOrder.setTicker("AAPL");
//    securityOrder.setSize(0);
//    securityOrder.setPrice(0.0D);
//    securityOrder.setNotes("");
//    securityOrderDao.save(securityOrder);
//
//    return positionDao.findById(trader.getId()).get();
  }

  private boolean validateTrader(Trader trader) {
    if (trader.getFirstName() != null &&
        trader.getLastName() != null &&
        trader.getDob() != null &&
        trader.getCountry() != null &&
        trader.getEmail() != null) {
      return true;
    }
    else {
      return false;
    }
  }

  /**
   * A trader can be deleted if it has no open position and 0 cash balance
   * - Validate traderId
   * - Get trader account by traderId and check account balance
   * - Get positions by accountId and check positions
   * - Delete all securityOrders, account, trader (in this order)
   *
   * @param traderId must not be null
   * @throws IllegalArgumentException if traderId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId) {
    if (traderId == null) {
      throw new IllegalArgumentException("traderId cannot be null");
    }
    if (!accountDao.existsById(traderId)) {
      throw new IllegalArgumentException("No account exists for id " + traderId);
    }
    if (accountDao.findById(traderId).get().getAmount() != 0) {
      throw new IllegalArgumentException("The account is not empty");
    }
    if (positionDao.existsById(traderId)) {
      if (positionDao.findById(traderId).get().getPosition() != 0) {
        throw new IllegalArgumentException("The trader's position is not 0");
      }
    }

    if (securityOrderDao.existsById(traderId)) {
      securityOrderDao.deleteById(traderId);
    }
    accountDao.deleteById(traderId);
    traderDao.deleteById(traderId);
  }

  /**
   * Deposit a fund to an account by traderId
   * - Validate user input
   * - Account = accountDao.findByTraderId
   * - accountDao.updateAmountById
   *
   * @param traderId must not be null
   * @param fund must be greater than 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found
   *                                  and fund is less than or equal to 0
   */
  public Account deposit(Integer traderId, Double fund) {
    if (traderId == null) {
      throw new IllegalArgumentException("traderId cannot be null");
    }
    if (fund <= 0) {
      throw new IllegalArgumentException("Fund must be greater than 0");
    }
    if (!accountDao.existsById(traderId)) {
      throw new IllegalArgumentException("No account exists for id " + traderId);
    }
    int rowsUpdated = accountDao.updateAmountById(traderId, fund, true);
    if (rowsUpdated != 1) {
      throw new DataRetrievalFailureException("Unable to update account");
    }
    return accountDao.findById(traderId).get();
  }

  /**
   * Withdraw a fund to an account by traderId
   *
   * - validate user input
   * - account = accountDao.findByTraderId
   * - accountDao.updateAmountById
   *
   * @param traderId trader ID
   * @param fund amount cannot be 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found
   *                                  and fund is less than or equal to 0, and insufficient fund
   */
  public Account withdraw(Integer traderId, Double fund) {
    if (traderId == null) {
      throw new IllegalArgumentException("traderId cannot be null");
    }
    if (fund <= 0) {
      throw new IllegalArgumentException("Fund must be greater than 0");
    }
    if (!accountDao.existsById(traderId)) {
      throw new IllegalArgumentException("No account exists for id " + traderId);
    }
    int rowsUpdated = accountDao.updateAmountById(traderId, fund, false);
    if (rowsUpdated != 1) {
      throw new DataRetrievalFailureException("Unable to update account");
    }
    return accountDao.findById(traderId).get();
  }
}